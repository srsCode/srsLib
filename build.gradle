plugins {
    id 'org.ajoberstar.reckon' version '0.16.1'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'checkstyle'
    id 'maven-publish'
}
if (file('../.etc/srscode-MC.gradle').exists()) { apply from:'../.etc/srscode-MC.gradle' }

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
tasks.withType(JavaCompile).configureEach {options.encoding = 'UTF-8'}

reckon {
    stages('dev', 'rc', 'final')
    setStageCalc(calcStageFromProp())
    setScopeCalc(calcScopeFromProp())
}

checkstyle {
    setConfig resources.text.fromUri('https://srscode.github.io/checkstyle/srsCode-MC-checkstyle-J16.xml')
    setReportsDir file("${project.buildDir}/reports/checkstyle")
    setToolVersion '10.3.1'
}
tasks.withType(Checkstyle) {
    reports.xml.enabled false
    reports.html.enabled true
}

minecraft {
    mappings channel: 'official', version: project.mc_version
    runs {
        client {
            taskName 'SrsLibClient'
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            mods {self {source sourceSets.main}}
        }
        server {
            taskName 'SrsLibServer'
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            mods {self {source sourceSets.main}}
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
}

setGroup 'de.srsco'
archivesBaseName = project.name
def commonManifest = manifest {
    attributes([
            'Implementation-Vendor'   : "srsCode",
            'Implementation-Title'    : "${project.name}",
            'Implementation-Version'  : "${project.version}",
            'Build-Jdk'               : "${System.properties['java.vendor']} ${System.properties['java.vm.version']}",
            'Build-Timestamp'         : java.time.OffsetDateTime.now() as String
    ])
}

jar {
    from 'LICENCE.txt'
    manifest.from commonManifest
    dependsOn('sourceJar')
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    from 'LICENCE.txt'
    manifest.from commonManifest
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar

            version project.version
            groupId = project.group
            artifactId = project.archivesBaseName

            pom {
                name = project.name
                description = 'A common Minecraft mod library for srsCode mods.'
                url = 'https://github.com/srsCode/srsLib'
                licenses {
                    license {
                        name = 'MIT license'
                        url = 'http://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/srsCode/srsLib'
                    connection = 'scm:git:git://github.com/srsCode/srsLib.git'
                    developerConnection = 'scm:git:git@github.com:srsCode/srsLib.git'
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = 'https://github.com/srsCode/srsLib/issues'
                }
            }
        }
    }
    repositories {
        maven {
            mavenLocal()
        }
    }
}
