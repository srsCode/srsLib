plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'checkstyle'
}

base.archivesName.set lib_name

java{
    withSourcesJar()
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

checkstyle {
    setConfig resources.text.fromUri('https://srscode.github.io/checkstyle/srsCode-checkstyle-J11+.xml')
    setReportsDir layout.buildDirectory.get().dir('reports').dir('checkstyle').asFile
    setToolVersion '10.12.5'
}
tasks.withType(Checkstyle).configureEach {
    it.reports.xml.required = false
    it.reports.html.required = true
}

repositories {mavenCentral()}

dependencies {compileOnly(group:'org.jetbrains', name:'annotations', version:'24.+')}

tasks.withType(JavaCompile).configureEach {options.encoding = 'UTF-8'}

tasks.withType(Jar).configureEach {
    from 'LICENCE.txt'
    manifest.attributes([
        'Implementation-Vendor'   : "srsCode",
        'Implementation-Title'    : "${base.archivesName.get()}",
        'Implementation-Version'  : "${project.version}",
        'Build-Jdk'               : "${System.properties['java.vendor']} ${System.properties['java.vm.version']}",
        'Build-Timestamp'         : java.time.OffsetDateTime.now() as String
    ])
}

// A task to partially clean build outputs while leaving cached artifacts alone
tasks.create('cleanOutputs', Delete).configure {cotask ->
    tasks.getByName('assemble').configure {mustRunAfter(cotask)}
    doFirst {targetFiles.each {project.logger.lifecycle "cleaning: $it.canonicalPath"}}
    delete(tasks.withType(JavaCompile).collect {it.outputs.files.files}.flatten())
    var libs = layout.buildDirectory.get().getAsFile().toPath().resolve("libs").toFile()
    if (libs.exists()) {delete(libs.listFiles())}
}

// A task to execute a clean build
tasks.create('cleanBuild') {
    dependsOn 'cleanOutputs', 'build'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar

            version project.version
            groupId = project.group
            artifactId = base.archivesName.get()

            pom {
                name = base.archivesName.get()
                description = 'A common Minecraft mod library for srsCode mods.'
                url = 'https://github.com/srsCode/srsLib'
                licenses {
                    license {
                        name = 'MIT license'
                        url = 'https://mit-license.org/'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/srsCode/srsLib'
                    connection = 'scm:git:https://github.com/srsCode/srsLib.git'
                    developerConnection = 'scm:git:git@github.com:srsCode/srsLib.git'
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = 'https://github.com/srsCode/srsLib/issues'
                }
            }
        }
    }
    repositories {
        maven {
            mavenLocal()
        }
    }
}
